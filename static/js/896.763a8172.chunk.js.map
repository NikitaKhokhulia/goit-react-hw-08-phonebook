{"version":3,"file":"static/js/896.763a8172.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.jsx","redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__1Y65-\",\"input\":\"ContactsForm_input__UjXFK\",\"button\":\"ContactsForm_button__zuUB3\"};","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport css from './ContactsForm.module.css';\nimport shortid from 'shortid';\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    const contact = {\n      id: shortid(),\n      name: e.currentTarget.name.value,\n      number: e.currentTarget.number.value,\n    };\n    if (contact !== '') {\n      dispatch(addContact(contact));\n      e.currentTarget.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label>\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\n// export const selectFilter = state => state.contacts.filter;\n\nexport const selectAllcontacts = state => state.contacts.items;\n\nexport const selectFilterState = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"wrapper\":\"ContactList_wrapper__VP-XU\",\"text\":\"ContactList_text__+NWAW\",\"button\":\"ContactList_button__7kL4l\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { selectAllcontacts, selectFilterState } from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllcontacts);\n  const filterValue = useSelector(selectFilterState);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(({ name, number, id }) => {\n        return (\n          <li key={id}>\n            {name} {number}\n            <button onClick={() => dispatch(deleteContact(id))}>Delete</button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { onFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const onChangeFilter = e => {\n    dispatch(onFilter(e.target.value));\n  };\n  return (\n    <>\n      <input\n        className={css.input}\n        onChange={onChangeFilter}\n        type=\"text\"\n        name=\"filter\"\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactsForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["ContactsForm","dispatch","useDispatch","className","css","onSubmit","e","contact","id","shortid","name","currentTarget","value","number","addContact","reset","alert","type","pattern","title","required","selectAllcontacts","state","contacts","items","selectFilterState","filter","ContactList","useSelector","filterValue","filteredContacts","toLowerCase","includes","map","onClick","deleteContact","onChange","onFilter","target","Contacts","useEffect","fetchContacts","Helmet","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}